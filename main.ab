// Check for dependencies first
trust $
if ! command -v bc > /dev/null 2>&1; then
    echo "Dependency check failed: 'bc' command not found. Please install 'bc' and try again." >&2
    echo "  - Debian/Ubuntu: sudo apt-get install bc" >&2
    echo "  - RedHat/CentOS: sudo yum install bc" >&2
    echo "  - Fedora:        sudo dnf install bc" >&2
    echo "  - Arch Linux:    sudo pacman -S bc" >&2
    echo "  - openSUSE:      sudo zypper install bc" >&2
    echo "  - Alpine:        apk add bc" >&2
    exit 1
fi
$

import { env_var_get, echo_error, echo_warning, echo_info } from "std/env"
import { starts_with } from "std/text"
import { array_contains } from "std/array"

const VERSION = "0.1.0"
const LANG = "en"

fun install(home_dir: Text): Null {
    echo_info("Entering Install Mode...")
}

main (arguments) {
    // Handle zero arguments case (although this should not happen)
    if len(arguments) < 1 :
        echo_error("Oops, no arguments provided! It should not happen. But it did. Please visit https://fuckit.sh and report this issue.")
    // First argument is the script name
    let script_name = arguments[0]
    // Remaining arguments are passed to the script
    let script_args = arguments[1..len(arguments)]
    // Get the home directory from environment variable
    let home_dir = env_var_get("HOME") failed {
        echo_warning("HOME environment variable is not set. Install Mode disabled.")
    }
    // Check if entering install mode or normal execution
    if {
        // Condition 1: Entering Installation Mode
        // We must check home_dir is not null *before* using it.
        len(script_args) == 0 and home_dir is Text and not starts_with(script_name, home_dir + "/.local/bin") : install(home_dir)

        // Condition 2: HOME not set during an install attempt
        len(script_args) == 0 and home_dir is Null :
            echo_error("Install failed: HOME environment variable is not set. Try 'export HOME=~' and run again.")

        // Print Version
        len(script_args) == 1 and array_contains(["-v", "--version", "version"], script_args[0]) :
            echo VERSION

        // Default case: Normal execution
        else {
            echo_info("Entering Normal Execution Mode...")
            // Call normal execution function, e.g., execute(script_args)
        }
    }
}
