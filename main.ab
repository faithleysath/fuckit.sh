const VERSION = "0.1.0"
const LANG = "en"
const NAME = "fuck"

// Check for dependencies first, need _ to avoid stray semicolon. If you can't understand, just keep it as is. It's not a bug, just to fit the compiler's behavior.
let _ = trust $
if ! command -v bc > /dev/null 2>&1; then
    echo -e "\\033[0;31mDependency check failed: 'bc' command not found. Please install 'bc' and try again.\\033[0m" >&2
    echo "  - Debian/Ubuntu: sudo apt-get install bc" >&2
    echo "  - RedHat/CentOS: sudo yum install bc" >&2
    echo "  - Fedora:        sudo dnf install bc" >&2
    echo "  - Arch Linux:    sudo pacman -S bc" >&2
    echo "  - openSUSE:      sudo zypper install bc" >&2
    echo "  - Alpine:        apk add bc" >&2
    exit 1
fi
$

import { env_var_get, echo_error, echo_warning, echo_info } from "std/env"
import { starts_with, split, parse_number } from "std/text"
import { array_contains } from "std/array"

fun compare_versions(v1: Text, v2: Text): Num? {
    let parts1 = split(v1, ".")
    let parts2 = split(v2, ".")

    let len1 = len(parts1)
    let len2 = len(parts2)

    let max_len = len1 > len2 then len1 else len2

    for i in 0..max_len {
        // If part is missing, treat it as 0
        let num1 = i < len1 then parse_number(parts1[i])? else 0
        let num2 = i < len2 then parse_number(parts2[i])? else 0


        if num1 > num2 : return 1
        if num1 < num2 : return -1
    }

    return 0
}

fun install(home_dir: Text): Null {
    let bin_path = home_dir + "/.local/bin/" + NAME

    // First, check if already installed, just check version command directly
    let current_version = $ {NAME} --version $ failed : let current_version = ""

    if current_version == "" :
        echo_info("fuckit.sh is not installed. Installing now...")
    else {
        let comparison = compare_versions(current_version, VERSION) failed : let comparison = -1
        if comparison == -1 :
            echo_info("A new version ({VERSION}) is available. Your current version is {current_version}. Updating...")
        else {
            echo_info("You are already using the latest version ({current_version}).")
            exit 0
        }
    }

    // Installation / Update process (they are the same here)
    // Step1: Check if the dir exsist
    
}

main (arguments) {
    // Handle zero arguments case (although this should not happen)
    if len(arguments) < 1 :
        echo_error("Oops, no arguments provided! It should not happen. But it did. Please visit https://fuckit.sh and report this issue.")
    // First argument is the script name
    let script_name = arguments[0]
    // Remaining arguments are passed to the script
    let script_args = arguments[1..len(arguments)]
    // Get the home directory from environment variable
    let home_dir = trust env_var_get("HOME")

    // Check execution mode
    if {
        // Print Version (Highest Priority)
        len(script_args) == 1 and array_contains(["-v", "--version", "version"], script_args[0]) :
            echo VERSION

        // Guard for HOME variable during install attempt
        len(script_args) == 0 and home_dir == "" :
            echo_error("Install failed: HOME environment variable is not set. Try 'export HOME=~' and run again.")

        // Installation Mode
        len(script_args) == 0 and not starts_with(script_name, home_dir + "/.local/bin") : 
            install(home_dir)

        // Default case: Normal execution
        else {
            echo_info("Entering Normal Execution Mode...")
            // Call normal execution function, e.g., execute(script_args)
        }
    }
}
