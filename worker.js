// --- FUCKIT.SH Cloudflare Worker ---

// This is the content of your main.sh installer script.
// It will be served when a user makes a GET request.
const INSTALLER_SCRIPT = atob(`IyEvYmluL2Jhc2gKIwojIFRoaXMgc2NyaXB0IGlzIHRoZSBpbnN0YWxsZXIgYW5kIHRlbXBvcmFyeSBydW5uZXIgZm9yIGZ1Y2tpdC5zaAojCiMgLS0tIFJFQ09NTUVOREVEIFNFQ1VSRSBVU0FHRSAtLS0KIwojIDEuIERvd25sb2FkOgojICAgIGN1cmwgLW8gZnVja2l0LnNoIGh0dHBzOi8vZnVja2l0LnNoCiMKIyAyLiBJbnNwZWN0OgojICAgIGxlc3MgZnVja2l0LnNoCiMKIyAzLiBSdW4gKEluc3RhbGwpOgojICAgIGJhc2ggZnVja2l0LnNoCiMKIyA0LiBSdW4gKFRlbXBvcmFyeSk6CiMgICAgYmFzaCBmdWNraXQuc2ggInlvdXIgcHJvbXB0IgojCgpzZXQgLWV1byBwaXBlZmFpbAoKIyAtLS0gQ29sb3IgRGVmaW5pdGlvbnMgLS0tCnJlYWRvbmx5IENfUkVTRVQ9J1wwMzNbMG0nCnJlYWRvbmx5IENfUkVEX0JPTEQ9J1wwMzNbMTszMW0nCnJlYWRvbmx5IENfUkVEPSdcMDMzWzA7MzFtJwpyZWFkb25seSBDX0dSRUVOPSdcMDMzWzA7MzJtJwpyZWFkb25seSBDX1lFTExPVz0nXDAzM1swOzMzbScKcmVhZG9ubHkgQ19DWUFOPSdcMDMzWzA7MzZtJwpyZWFkb25seSBDX0JPTEQ9J1wwMzNbMW0nCgojIC0tLSBGVUNLISAtLS0KcmVhZG9ubHkgRlVDSz0iJHtDX1JFRF9CT0xEfUZVQ0shJHtDX1JFU0VUfSIKcmVhZG9ubHkgRkNLTj0iJHtDX1JFRH1GKkNLSU5HJHtDX1JFU0VUfSIKCgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQpyZWFkb25seSBJTlNUQUxMX0RJUj0iJEhPTUUvLmZ1Y2siCnJlYWRvbmx5IE1BSU5fU0g9IiRJTlNUQUxMX0RJUi9tYWluLnNoIgojIFRoZSBBUEkgZW5kcG9pbnQgZm9yIHRoZSBDbG91ZGZsYXJlIEVkZ2UgRnVuY3Rpb24KcmVhZG9ubHkgQVBJX0VORFBPSU5UPSJodHRwczovL2Z1Y2tpdC5zaC8iCgoKIyAtLS0gQ29yZSBMb2dpYyAoRW1iZWRkZWQgYXMgYSBzdHJpbmcpIC0tLQpDT1JFX0xPR0lDPSQoY2F0IDw8J0VPRicKCiMgLS0tIEJlZ2luIENvcmUgTG9naWMgZm9yIGZ1Y2tpdC5zaCAtLS0KCiMgLS0tIENvbG9yIERlZmluaXRpb25zIC0tLQpyZWFkb25seSBDX1JFU0VUPSdcMDMzWzBtJwpyZWFkb25seSBDX1JFRF9CT0xEPSdcMDMzWzE7MzFtJwpyZWFkb25seSBDX1JFRD0nXDAzM1swOzMxbScKcmVhZG9ubHkgQ19HUkVFTj0nXDAzM1swOzMybScKcmVhZG9ubHkgQ19ZRUxMT1c9J1wwMzNbMDszM20nCnJlYWRvbmx5IENfQ1lBTj0nXDAzM1swOzM2bScKcmVhZG9ubHkgQ19CT0xEPSdcMDMzWzFtJwoKIyAtLS0gRlVDSyEgLS0tCnJlYWRvbmx5IEZVQ0s9IiR7Q19SRURfQk9MRH1GVUNLISR7Q19SRVNFVH0iCnJlYWRvbmx5IEZDS049IiR7Q19SRUR9RipDS0lORyR7Q19SRVNFVH0iCgojIC0tLSBDb25maWd1cmF0aW9uIC0tLQpyZWFkb25seSBJTlNUQUxMX0RJUj0iJEhPTUUvLmZ1Y2siCnJlYWRvbmx5IE1BSU5fU0g9IiRJTlNUQUxMX0RJUi9tYWluLnNoIgoKIyBIZWxwZXIgdG8gZmluZCB0aGUgdXNlcidzIHNoZWxsIHByb2ZpbGUgZmlsZQpfaW5zdGFsbGVyX2RldGVjdF9wcm9maWxlKCkgewogICAgaWYgWyAtbiAiJHtTSEVMTDotfSIgXSAmJiBlY2hvICIkU0hFTEwiIHwgZ3JlcCAtcSAienNoIjsgdGhlbgogICAgICAgIGVjaG8gIiRIT01FLy56c2hyYyIKICAgIGVsaWYgWyAtbiAiJHtTSEVMTDotfSIgXSAmJiBlY2hvICIkU0hFTEwiIHwgZ3JlcCAtcSAiYmFzaCI7IHRoZW4KICAgICAgICBlY2hvICIkSE9NRS8uYmFzaHJjIgogICAgZWxpZiBbIC1mICIkSE9NRS8ucHJvZmlsZSIgXTsgdGhlbgogICAgICAgICMgRmFsbGJhY2sgZm9yIHNoLCBrc2gsIGV0Yy4KICAgICAgICBlY2hvICIkSE9NRS8ucHJvZmlsZSIKICAgIGVsaWYgWyAtZiAiJEhPTUUvLnpzaHJjIiBdOyB0aGVuCiAgICAgICAgIyBGYWxsYmFjayBpZiBTSEVMTCB2YXIgaXNuJ3Qgc2V0CiAgICAgICAgZWNobyAiJEhPTUUvLnpzaHJjIgogICAgZWxpZiBbIC1mICIkSE9NRS8uYmFzaHJjIiBdOyB0aGVuCiAgICAgICAgIyBGYWxsYmFjayBpZiBTSEVMTCB2YXIgaXNuJ3Qgc2V0CiAgICAgICAgZWNobyAiJEhPTUUvLmJhc2hyYyIKICAgIGVsc2UKICAgICAgICBlY2hvICJ1bmtub3duX3Byb2ZpbGUiCiAgICBmaQp9CgojIERldGVjdHMgdGhlIHBhY2thZ2UgbWFuYWdlcgpfZnVja19kZXRlY3RfcGtnX21hbmFnZXIoKSB7CiAgICBpZiBjb21tYW5kIC12IGFwdC1nZXQgJj4gL2Rldi9udWxsOyB0aGVuCiAgICAgICAgZWNobyAiYXB0IgogICAgZWxpZiBjb21tYW5kIC12IHl1bSAmPiAvZGV2L251bGw7IHRoZW4KICAgICAgICBlY2hvICJ5dW0iCiAgICBlbGlmIGNvbW1hbmQgLXYgZG5mICY+IC9kZXYvbnVsbDsgdGhlbgogICAgICAgIGVjaG8gImRuZiIKICAgIGVsaWYgY29tbWFuZCAtdiBwYWNtYW4gJj4gL2Rldi9udWxsOyB0aGVuCiAgICAgICAgZWNobyAicGFjbWFuIgogICAgZWxpZiBjb21tYW5kIC12IHp5cHBlciAmPiAvZGV2L251bGw7IHRoZW4KICAgICAgICBlY2hvICJ6eXBwZXIiCiAgICBlbGlmIGNvbW1hbmQgLXYgYnJldyAmPiAvZGV2L251bGw7IHRoZW4KICAgICAgICBlY2hvICJicmV3IgogICAgZWxzZQogICAgICAgIGVjaG8gInVua25vd24iCiAgICBmaQp9CgojIENvbGxlY3RzIHN5c3RlbSBpbmZvIGFzIGEgc2ltcGxlIHN0cmluZwpfZnVja19jb2xsZWN0X3N5c2luZm9fc3RyaW5nKCkgewogICAgbG9jYWwgcGtnX21hbmFnZXIKICAgIHBrZ19tYW5hZ2VyPSQoX2Z1Y2tfZGV0ZWN0X3BrZ19tYW5hZ2VyKQogICAgIyBUaGUgc2VydmVyLXNpZGUgTExNIHByb21wdCB3aWxsIG5lZWQgdG8gcGFyc2UgdGhpcyBzdHJpbmcKICAgIGVjaG8gIk9TOiAkKHVuYW1lIC1zKSwgQXJjaDogJCh1bmFtZSAtbSksIFNoZWxsOiAke1NIRUxMOi11bmtub3dufSwgUGtnTWdyOiAkcGtnX21hbmFnZXIsIENXRDogJChwd2QpIgp9CgojIEVzY2FwZXMgYSBzdHJpbmcgZm9yIHVzZSBpbiBhIEpTT04gcGF5bG9hZApfZnVja19qc29uX2VzY2FwZSgpIHsKICAgICMgQmFzaWMgZXNjYXBlIGZvciBxdW90ZXMsIGJhY2tzbGFzaGVzLCBhbmQgY29udHJvbCBjaGFyYWN0ZXJzCiAgICBwcmludGYgJyVzJyAiJDEiIHwgc2VkIC1lICdzL1xcL1xcXFwvZycgLWUgJ3MvIi9cXCIvZycgLWUgJ3MvXG4vXFxuL2cnIC1lICdzL1xyL1xcci9nJyAtZSAncy9cdC9cXHQvZycKfQoKIyBVbmluc3RhbGxzIHRoZSBzY3JpcHQKX3VuaW5zdGFsbF9zY3JpcHQoKSB7CiAgICBlY2hvIC1lICIke0NfWUVMTE9XfVVuaW5zdGFsbGluZyBmdWNraXQuc2guLi4ke0NfUkVTRVR9IgoKICAgICMgRmluZCB0aGUgcHJvZmlsZSBmaWxlCiAgICBsb2NhbCBwcm9maWxlX2ZpbGUKICAgIHByb2ZpbGVfZmlsZT0kKF9pbnN0YWxsZXJfZGV0ZWN0X3Byb2ZpbGUpCiAgICBsb2NhbCBzb3VyY2VfbGluZT0ic291cmNlICRNQUlOX1NIIgoKICAgIGlmIFsgIiRwcm9maWxlX2ZpbGUiICE9ICJ1bmtub3duX3Byb2ZpbGUiIF0gJiYgWyAtZiAiJHByb2ZpbGVfZmlsZSIgXTsgdGhlbgogICAgICAgIGlmIGdyZXAgLXFGICIkc291cmNlX2xpbmUiICIkcHJvZmlsZV9maWxlIjsgdGhlbgogICAgICAgICAgICBlY2hvIC1lICIke0NfQ1lBTn1SZW1vdmluZyBzb3VyY2UgbGluZSBmcm9tICRwcm9maWxlX2ZpbGUuLi4ke0NfUkVTRVR9IgogICAgICAgICAgICAjIFVzZSBzZWQgdG8gcmVtb3ZlIHRoZSBsaW5lcy4gQ3JlYXRlIGEgYmFja3VwLgogICAgICAgICAgICBzZWQgLWkuYmFrICJcfCRzb3VyY2VfbGluZXxkIiAiJHByb2ZpbGVfZmlsZSIKICAgICAgICAgICAgc2VkIC1pLmJhayAiXHwjIEFkZGVkIGJ5IGZ1Y2tpdC5zaCBpbnN0YWxsZXJ8ZCIgIiRwcm9maWxlX2ZpbGUiCiAgICAgICAgICAgIGVjaG8gLWUgIiR7Q19HUkVFTn1Tb3VyY2UgbGluZSByZW1vdmVkLiR7Q19SRVNFVH0iCiAgICAgICAgZWxzZQogICAgICAgICAgICBlY2hvIC1lICIke0NfWUVMTE9XfVNvdXJjZSBsaW5lIG5vdCBmb3VuZCBpbiAkcHJvZmlsZV9maWxlLiBTa2lwcGluZy4ke0NfUkVTRVR9IgogICAgICAgIGZpCiAgICBlbHNlCiAgICAgICAgZWNobyAtZSAiJHtDX1lFTExPV31Db3VsZCBub3QgZmluZCBhIHNoZWxsIHByb2ZpbGUgZmlsZSB0byBtb2RpZnkuJHtDX1JFU0VUfSIKICAgIGZpCgogICAgaWYgWyAtZCAiJElOU1RBTExfRElSIiBdOyB0aGVuCiAgICAgICAgZWNobyAtZSAiJHtDX0NZQU59UmVtb3ZpbmcgaW5zdGFsbGF0aW9uIGRpcmVjdG9yeTogJElOU1RBTExfRElSLi4uJHtDX1JFU0VUfSIKICAgICAgICBybSAtcmYgIiRJTlNUQUxMX0RJUiIKICAgICAgICBlY2hvIC1lICIke0NfR1JFRU59SW5zdGFsbGF0aW9uIGRpcmVjdG9yeSByZW1vdmVkLiR7Q19SRVNFVH0iCiAgICBlbHNlCiAgICAgICAgZWNobyAtZSAiJHtDX1lFTExPV31JbnN0YWxsYXRpb24gZGlyZWN0b3J5IG5vdCBmb3VuZC4gU2tpcHBpbmcuJHtDX1JFU0VUfSIKICAgIGZpCgogICAgZWNobyAtZSAiJHtDX0dSRUVOfVVuaW5zdGFsbGF0aW9uIGNvbXBsZXRlLiR7Q19SRVNFVH0iCiAgICBlY2hvIC1lICIke0NfQ1lBTn1QbGVhc2UgcmVzdGFydCB5b3VyIHNoZWxsIGZvciB0aGUgY2hhbmdlcyB0byB0YWtlIGVmZmVjdC4ke0NfUkVTRVR9Igp9CgojIFRoZSBtYWluIGZ1bmN0aW9uIHRoYXQgY29udGFjdHMgdGhlIEFQSQojIFRha2VzID4wIGFyZ3VtZW50cyBhcyB0aGUgcHJvbXB0Cl9mdWNrX2V4ZWN1dGVfcHJvbXB0KCkgewogICAgaWYgWyAiJDEiID0gInVuaW5zdGFsbCIgXTsgdGhlbgogICAgICAgIF91bmluc3RhbGxfc2NyaXB0CiAgICAgICAgcmV0dXJuIDAKICAgIGZpCgogICAgaWYgISBjb21tYW5kIC12IGN1cmwgJj4gL2Rldi9udWxsOyB0aGVuCiAgICAgICAgZWNobyAtZSAiJEZVQ0sgJHtDX1JFRH0nZnVjaycgY29tbWFuZCBuZWVkcyAnY3VybCcuIFBsZWFzZSBpbnN0YWxsIGl0LiR7Q19SRVNFVH0iID4mMgogICAgICAgIHJldHVybiAxCiAgICBmaQoKICAgIGlmIFsgIiQjIiAtZXEgMCBdOyB0aGVuCiAgICAgICAgZWNobyAtZSAiJEZVQ0sgJHtDX1JFRH1Zb3UgZm9yZ290IHRvIGFzayBtZSB3aGF0IHRvIGRvLiR7Q19SRVNFVH0iID4mMgogICAgICAgIHJldHVybiAxCiAgICBmaQoKICAgIGxvY2FsIHByb21wdD0iJCoiCiAgICBsb2NhbCBzeXNpbmZvX3N0cmluZwogICAgc3lzaW5mb19zdHJpbmc9JChfZnVja19jb2xsZWN0X3N5c2luZm9fc3RyaW5nKQogICAgCiAgICBsb2NhbCBlc2NhcGVkX3Byb21wdAogICAgZXNjYXBlZF9wcm9tcHQ9JChfZnVja19qc29uX2VzY2FwZSAiJHByb21wdCIpCiAgICAKICAgIGxvY2FsIGVzY2FwZWRfc3lzaW5mbwogICAgZXNjYXBlZF9zeXNpbmZvPSQoX2Z1Y2tfanNvbl9lc2NhcGUgIiRzeXNpbmZvX3N0cmluZyIpCgogICAgIyBDb25zdHJ1Y3QgdGhlIEpTT04gcGF5bG9hZAogICAgbG9jYWwgcGF5bG9hZAogICAgcGF5bG9hZD0kKHByaW50ZiAneyAic3lzaW5mbyI6ICIlcyIsICJwcm9tcHQiOiAiJXMiIH0nICIkZXNjYXBlZF9zeXNpbmZvIiAiJGVzY2FwZWRfcHJvbXB0IikKCiAgICAjIEFQSV9FTkRQT0lOVCBtdXN0IGJlIGhhcmRjb2RlZCBoZXJlIGZvciB0aGUgbG9naWMgdG8gYmUgcG9ydGFibGUKICAgIGxvY2FsIGFwaV91cmw9Imh0dHBzOi8vZnVja2l0LnNoLyIKCiAgICBlY2hvIC1lICIkRkNLTiAke0NfQ1lBTn10aGlua2luZy4uLiR7Q19SRVNFVH0iID4mMgoKICAgIGxvY2FsIHJlc3BvbnNlCiAgICByZXNwb25zZT0kKGN1cmwgLXMgLVggUE9TVCAiJGFwaV91cmwiIFwKICAgICAgICAtSCAiQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uIiBcCiAgICAgICAgLWQgIiRwYXlsb2FkIikKCiAgICBpZiBbIC16ICIkcmVzcG9uc2UiIF07IHRoZW4KICAgICAgICBlY2hvIC1lICIkRlVDSyAke0NfUkVEfVRoZSBBSSBpcyBnaG9zdGluZyBtZS4gR290IG5vdGhpbmcgYmFjay4ke0NfUkVTRVR9IiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKCiAgICAjIC0tLSBVc2VyIENvbmZpcm1hdGlvbiAoYXMgcmVxdWVzdGVkKSAtLS0KICAgIGVjaG8gLWUgIiR7Q19ZRUxMT1d9LS0tIFRoZSBBSSBtdW1ibGVkIHRoaXMsIGhvcGUgaXQncyByaWdodCAtLS0ke0NfUkVTRVR9IgogICAgIyBQaXBlIHRvICdtb3JlJyBmb3IgdXNlciByZXZpZXcKICAgIGVjaG8gLWUgIiR7Q19DWUFOfSRyZXNwb25zZSR7Q19SRVNFVH0iIHwgbW9yZQogICAgZWNobyAtZSAiJHtDX0JPTER9LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJHtDX1JFU0VUfSIKICAgIAogICAgIyBTZWNvbmRhcnkgY29uZmlybWF0aW9uIHByb21wdAogICAgcHJpbnRmICIke0NfWUVMTE9XfSRGQ0tOIGV4ZWN1dGUgaXQ/IFt5L05dJHtDX1JFU0VUfSAiCiAgICBsb2NhbCBjb25maXJtYXRpb24KICAgIHJlYWQgLXIgY29uZmlybWF0aW9uCgogICAgaWYgW1sgIiRjb25maXJtYXRpb24iID1+IF5beVldKFtlRV1bc1NdKT8kIF1dOyB0aGVuCiAgICAgICAgZWNobyAtZSAiJEZVQ0sgJHtDX1JFRH1JVCwgV0UgRE8gSVQgTElWRSEke0NfUkVTRVR9IiA+JjIKICAgICAgICAjIEV4ZWN1dGUgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlcgogICAgICAgIGV2YWwgIiRyZXNwb25zZSIKICAgICAgICBlY2hvIC1lICIke0NfR1JFRU59JEZVQ0sgSXQncyBkb25lLiBQcm9iYWJseS4ke0NfUkVTRVR9IgogICAgZWxzZQogICAgICAgIGVjaG8gLWUgIiRGVUNLICR7Q19SRUR9RmluZSwgZG8gaXQgeW91cnNlbGYuJHtDX1JFU0VUfSIgPiYyCiAgICBmaQp9CgojIERlZmluZSB0aGUgYWxpYXMgZm9yIGludGVyYWN0aXZlIHVzZQphbGlhcyBmdWNrPSdfZnVja19leGVjdXRlX3Byb21wdCcKCiMgLS0tIEVuZCBDb3JlIExvZ2ljIC0tLQpFT0YKKQojIC0tLSBFbmQgb2YgQ29yZSBMb2dpYyBIZXJlZG9jIC0tLQoKCiMgLS0tIEluc3RhbGxlciBGdW5jdGlvbnMgKFJ1biBieSB0aGUgb3V0ZXIgc2NyaXB0KSAtLS0KCiMgSGVscGVyIHRvIGZpbmQgdGhlIHVzZXIncyBzaGVsbCBwcm9maWxlIGZpbGUKX2luc3RhbGxlcl9kZXRlY3RfcHJvZmlsZSgpIHsKICAgIGlmIFsgLW4gIiR7U0hFTEw6LX0iIF0gJiYgZWNobyAiJFNIRUxMIiB8IGdyZXAgLXEgInpzaCI7IHRoZW4KICAgICAgICBlY2hvICIkSE9NRS8uenNocmMiCiAgICBlbGlmIFsgLW4gIiR7U0hFTEw6LX0iIF0gJiYgZWNobyAiJFNIRUxMIiB8IGdyZXAgLXEgImJhc2giOyB0aGVuCiAgICAgICAgZWNobyAiJEhPTUUvLmJhc2hyYyIKICAgIGVsaWYgWyAtZiAiJEhPTUUvLnByb2ZpbGUiIF07IHRoZW4KICAgICAgICAjIEZhbGxiYWNrIGZvciBzaCwga3NoLCBldGMuCiAgICAgICAgZWNobyAiJEhPTUUvLnByb2ZpbGUiCiAgICBlbGlmIFsgLWYgIiRIT01FLy56c2hyYyIgXTsgdGhlbgogICAgICAgICMgRmFsbGJhY2sgaWYgU0hFTEwgdmFyIGlzbid0IHNldAogICAgICAgIGVjaG8gIiRIT01FLy56c2hyYyIKICAgIGVsaWYgWyAtZiAiJEhPTUUvLmJhc2hyYyIgXTsgdGhlbgogICAgICAgICMgRmFsbGJhY2sgaWYgU0hFTEwgdmFyIGlzbid0IHNldAogICAgICAgIGVjaG8gIiRIT01FLy5iYXNocmMiCiAgICBlbHNlCiAgICAgICAgZWNobyAidW5rbm93bl9wcm9maWxlIgogICAgZmkKfQoKIyBNYWluIGluc3RhbGxhdGlvbiBmdW5jdGlvbgpfaW5zdGFsbF9zY3JpcHQoKSB7CiAgICBlY2hvIC1lICIke0NfQk9MRH1BbHJpZ2h0LCBsZXQncyBpbnN0YWxsIHRoaXMgc2hpdCB0byAkSU5TVEFMTF9ESVIuLi4ke0NfUkVTRVR9IgogICAgbWtkaXIgLXAgIiRJTlNUQUxMX0RJUiIKICAgIAogICAgIyBXcml0ZSB0aGUgZW1iZWRkZWQgY29yZSBsb2dpYyB0byB0aGUgbWFpbi5zaCBmaWxlCiAgICBlY2hvICIkQ09SRV9MT0dJQyIgPiAiJE1BSU5fU0giCiAgICAKICAgIGlmIFsgJD8gLW5lIDAgXTsgdGhlbgogICAgICAgIGVjaG8gLWUgIiRGVUNLICR7Q19SRUR9Q2FuJ3Qgd3JpdGUgdG8gdGhlIGZpbGUuIENoZWNrIHlvdXIgZGFtbiBwZXJtaXNzaW9ucy4ke0NfUkVTRVR9IiA+JjIKICAgICAgICByZXR1cm4gMQogICAgZmkKICAgIAogICAgZWNobyAtZSAiLS0tICRGVUNLICR7Q19HUkVFTn1JdCdzIGluc3RhbGxlZC4gLS0tJHtDX1JFU0VUfSIKCiAgICAjIEFkZCBzb3VyY2UgbGluZSB0byBzaGVsbCBwcm9maWxlCiAgICBsb2NhbCBwcm9maWxlX2ZpbGUKICAgIHByb2ZpbGVfZmlsZT0kKF9pbnN0YWxsZXJfZGV0ZWN0X3Byb2ZpbGUpCiAgICAKICAgIGlmIFsgIiRwcm9maWxlX2ZpbGUiID0gInVua25vd25fcHJvZmlsZSIgXTsgdGhlbgogICAgICAgIGVjaG8gLWUgIiRGVUNLICR7Q19SRUR9SSBjYW4ndCBmaW5kIC5iYXNocmMsIC56c2hyYywgb3IgLnByb2ZpbGUuIFlvdSdyZSBvbiB5b3VyIG93bi4ke0NfUkVTRVR9IiA+JjIKICAgICAgICBlY2hvIC1lICIke0NfWUVMTE9XfU1hbnVhbGx5IGFkZCB0aGlzIGxpbmUgdG8gd2hhdGV2ZXIgc3RhcnR1cCBmaWxlIHlvdSB1c2U6JHtDX1JFU0VUfSIgPiYyCiAgICAgICAgZWNobyAtZSAiXG4gICR7Q19DWUFOfXNvdXJjZSAkTUFJTl9TSCR7Q19SRVNFVH1cbiIgPiYyCiAgICAgICAgcmV0dXJuCiAgICBmaQogICAgCiAgICBsb2NhbCBzb3VyY2VfbGluZT0ic291cmNlICRNQUlOX1NIIgogICAgaWYgISBncmVwIC1xRiAiJHNvdXJjZV9saW5lIiAiJHByb2ZpbGVfZmlsZSI7IHRoZW4KICAgICAgICBlY2hvIC1lICIke0NfQ1lBTn1BZGRpbmcgc291cmNlIGxpbmUgdG8gJHByb2ZpbGVfZmlsZS4uLiR7Q19SRVNFVH0iCiAgICAgICAgZWNobyAiIiA+PiAiJHByb2ZpbGVfZmlsZSIKICAgICAgICBlY2hvICIjIEFkZGVkIGJ5IGZ1Y2tpdC5zaCBpbnN0YWxsZXIiID4+ICIkcHJvZmlsZV9maWxlIgogICAgICAgIGVjaG8gIiRzb3VyY2VfbGluZSIgPj4gIiRwcm9maWxlX2ZpbGUiCiAgICAgICAgZWNobyAtZSAiJHtDX0dSRUVOfURvbmUuIE5vdyByZXN0YXJ0IHlvdXIgZ29kZGFtbiBzaGVsbCBvciBydW46JHtDX1JFU0VUfSIKICAgICAgICBlY2hvIC1lICIgICR7Q19DWUFOfXNvdXJjZSAkcHJvZmlsZV9maWxlJHtDX1JFU0VUfSIKICAgIGVsc2UKICAgICAgICBlY2hvIC1lICIke0NfR1JFRU59QWxyZWFkeSBpbnN0YWxsZWQgKHNvdXJjZSBsaW5lIGZvdW5kIGluICRwcm9maWxlX2ZpbGUpLiR7Q19SRVNFVH0iCiAgICAgICAgZWNobyAtZSAiJHtDX0NZQU59UnVuICdiYXNoICQwJyBhZ2FpbiB0byB1cGRhdGUgKGFzc3VtaW5nIHlvdSBzYXZlZCB0aGlzIGFzIGEgZmlsZSkuJHtDX1JFU0VUfSIKICAgIGZpCn0KCgojIC0tLSBNYWluIFNjcmlwdCBFbnRyeXBvaW50IC0tLQoKIyBJZiBhcmd1bWVudHMgYXJlIHBhc3NlZCAoZS5nLiwgImJhc2ggLXMgLi4uIikKaWYgWyAiJCMiIC1ndCAwIF07IHRoZW4KICAgICMgVGVtcG9yYXJ5IE1vZGUKICAgIGVjaG8gLWUgIi0tLSAkRkNLTiAke0NfQ1lBTn1pbiB0ZW1wb3JhcnkgKG9uZS1zaG90KSBtb2RlLi4uIC0tLSR7Q19SRVNFVH0iCiAgICAjIEV2YWx1YXRlIHRoZSBjb3JlIGxvZ2ljIHRvIGRlZmluZSBmdW5jdGlvbnMgaW4gdGhpcyBzaGVsbAogICAgZXZhbCAiJENPUkVfTE9HSUMiCiAgICAjIENhbGwgdGhlIG1haW4gZnVuY3Rpb24gZGlyZWN0bHkgKGFsaWFzIHdvbid0IHdvcmsgaGVyZSkKICAgIF9mdWNrX2V4ZWN1dGVfcHJvbXB0ICIkQCIKZWxzZQogICAgIyBJbnN0YWxsIE1vZGUKICAgIF9pbnN0YWxsX3NjcmlwdApmaQo=`);

export default {
  async fetch(request, env, ctx) {
    if (request.method === 'GET') {
      return handleGetRequest(request);
    } else if (request.method === 'POST') {
      return handlePostRequest(request, env);
    } else {
      return new Response('Expected GET or POST', { status: 405 });
    }
  },
};

/**
 * Handles GET requests to serve the installer script.
 * @param {Request} request The incoming request.
 * @returns {Response} A response with the shell script.
 */
function handleGetRequest(request) {
  return new Response(INSTALLER_SCRIPT, {
    headers: {
      'Content-Type': 'text/plain; charset=utf-8',
      'Content-Disposition': 'attachment; filename="fuckit.sh"',
    },
  });
}

/**
 * Handles POST requests by forwarding the prompt to an AI model.
 * @param {Request} request The incoming request.
 * @param {object} env The environment variables.
 * @returns {Promise<Response>} A promise that resolves to the AI's response.
 */
async function handlePostRequest(request, env) {
  try {
    const { sysinfo, prompt } = await request.json();

    if (!prompt) {
      return new Response('Missing "prompt" in request body', { status: 400 });
    }
    if (!env.OPENAI_API_KEY) {
      return new Response('Missing OPENAI_API_KEY secret', { status: 500 });
    }

    const model = env.OPENAI_API_MODEL || 'gpt-4-turbo';
    const apiBase = (env.OPENAI_API_BASE || 'https://api.openai.com/v1').replace(/\/$/, '');
    const apiUrl = `${apiBase}/chat/completions`;

    const aiRequestPayload = {
      model: model,
      messages: [
        {
          role: 'system',
          content: `You are an expert shell script generator. A user will provide their system information and a prompt. Your task is to return a raw, executable shell script that accomplishes their goal. The script can be multi-line. Do not provide any explanation, comments, markdown formatting (like \`\`\`bash), or a shebang (e.g., #!/bin/bash). Just the raw script content. The user's system info is: ${sysinfo}`,
        },
        {
          role: 'user',
          content: prompt,
        },
      ],
      max_tokens: 1024,
      temperature: 0.2,
    };

    const aiResponse = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify(aiRequestPayload),
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      return new Response(`AI API Error: ${errorText}`, { status: aiResponse.status });
    }

    const aiJson = await aiResponse.json();
    const command = aiJson.choices[0]?.message?.content.trim();

    if (!command) {
      return new Response('The AI returned an empty command.', { status: 500 });
    }

    return new Response(command, {
      headers: { 'Content-Type': 'text/plain' },
    });
  } catch (error) {
    return new Response(`Error: ${error.message}`, { status: 500 });
  }
}
